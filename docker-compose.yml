version: "3.3"
 
networks:
    public_net:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: ${NETWORK_SUBNET}
 
services:
    apache:
        container_name: ${COMPOSE_PROJECT_NAME}_apache
        build:
            context: docker/apache
            args:
                - APACHE_IMG_VERSION=${APACHE_IMG_VERSION}
                - USER_ID=${USER_ID}
                - GROUP_ID=${GROUP_ID}
                - WEB_USER=${WEB_USER}
                - WEB_GROUP=${WEB_GROUP}
                - APACHE_ROOT_DIR=${APACHE_ROOT_DIR}
        volumes:
            - ./docker/apache/log:${APACHE_ROOT_DIR}/logs
            - ./docker/apache/conf/httpd.conf:${APACHE_ROOT_DIR}/conf/httpd.conf:ro
            - ./docker/apache/conf/httpd-vhosts.conf:${APACHE_ROOT_DIR}/conf/extra/httpd-vhosts.conf:ro
            # NÃ©cessaire, sinon quand on demande un dossier, apache ne peux pas savoir qu'il y'a un index.php dedans
            - ./public:${APACHE_ROOT_DIR}/htdocs
        ports:
            - ${APACHE_EXPOSED_PORT}:80
        networks:
            public_net:
                ipv4_address: ${APACHE_IP}
        env_file:
            - .env

    php:
        container_name: ${COMPOSE_PROJECT_NAME}_php
        build:
            context: docker/php
            args:
                - PHP_IMG_VERSION=${PHP_IMG_VERSION}
                - USER_ID=${USER_ID}
                - GROUP_ID=${GROUP_ID}
                - WEB_USER=${WEB_USER}
                - WEB_GROUP=${WEB_GROUP}
                - PHP_DATA_DIR=${PHP_DATA_DIR}
                - PHP_ROOT_DIR=${PHP_ROOT_DIR}
        working_dir: ${PHP_APP_DIR}
        volumes:
            - ./public:${PHP_APP_DIR}
            - ./docker/php/data:${PHP_DATA_DIR}
            - ./docker/php/log:${PHP_ROOT_DIR}/logs
            - ./docker/php/conf/www.conf:${PHP_ROOT_DIR}/php-fpm.d/www.conf:ro
        depends_on:
            - apache
            - db
        networks:
            public_net:
                ipv4_address: ${PHP_IP}
        env_file:
            - .env

    db:
        container_name: ${COMPOSE_PROJECT_NAME}_mariadb
        build:
            context: docker/mariadb
            args:
                - MARIADB_IMG_VERSION=${MARIADB_IMG_VERSION}
                - USER_ID=${USER_ID}
                - GROUP_ID=${GROUP_ID}
                - MARIADB_CONTAINER_USER=${MARIADB_CONTAINER_USER}
                - MARIADB_CONTAINER_GROUP=${MARIADB_CONTAINER_GROUP}
        volumes:
            - ./docker/mariadb/log:${MARIADB_LOG_DIR}
            - ./docker/mariadb/data:${MARIADB_DATA_DIR}
            # La conf a revoir
            - ./docker/mariadb/conf/esco-strict-server.cnf:/etc/mysql/conf.d/custom.cnf:ro
            - /etc/timezone:/etc/timezone:ro
        networks:
            public_net:
                ipv4_address: ${MARIADB_IP}
        env_file:
            - .env
        ports:
            - ${MARIADB_EXPOSED_PORT}:3306
        command: 'mysqld --innodb-flush-method=fsync'
        # A voir si utile
        healthcheck:
            test: "cat /proc/net/tcp /proc/net/tcp6 | grep ':0CEA'"
            interval: 10s
            timeout: 5s
            retries: 5

    redis1:
        container_name: ${COMPOSE_PROJECT_NAME}_redis1
        image: ${REDIS_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${REDIS1_IP}
        volumes:
            - ./docker/redis/conf/redis-master.conf:/etc/redis/redis.conf
            - ./docker/redis/data1:/data
        command: redis-server /etc/redis/redis.conf
        ports:
            - ${REDIS_EXPOSED_PORT}:6379
        env_file:
            - .env

    redis2:
        container_name: ${COMPOSE_PROJECT_NAME}_redis2
        image: ${REDIS_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${REDIS2_IP}
        volumes:
            - ./docker/redis/conf/redis-slave.conf:/etc/redis/redis.conf
            - ./docker/redis/data2:/data
        command: redis-server /etc/redis/redis.conf
        links:
            - redis1
        env_file:
            - .env
    
    sentinel1:
        container_name: ${COMPOSE_PROJECT_NAME}_sentinel1
        build:
            context: docker/redis-sentinel
            args:
                - SENTINEL_IMG_VERSION=${SENTINEL_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${SENTINEL1_IP}
        links:
            - redis1
        env_file:
            - .env
    
    sentinel2:
        container_name: ${COMPOSE_PROJECT_NAME}_sentinel2
        build:
            context: docker/redis-sentinel
            args:
                - SENTINEL_IMG_VERSION=${SENTINEL_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${SENTINEL2_IP}
        links:
            - redis1
        env_file:
            - .env

    sentinel3:
        container_name: ${COMPOSE_PROJECT_NAME}_sentinel3
        build:
            context: docker/redis-sentinel
            args:
                - SENTINEL_IMG_VERSION=${SENTINEL_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${SENTINEL3_IP}
        links:
            - redis1
        env_file:
            - .env

    haproxy:
        container_name: ${COMPOSE_PROJECT_NAME}_haproxy
        image: ${HAPROXY_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${HAPROXY_IP}
        ports:
            - ${HAPROXY_EXPOSED_PORT}:8080
            - ${HAPROXY_REDIS_READ_EXPOSED_PORT}:6379
            - ${HAPROXY_REDIS_WRITE_EXPOSED_PORT}:6380
        volumes:
            - ./docker/haproxy/conf/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
        links:
            - redis1
            - redis2
    
    adminer:
        container_name: ${COMPOSE_PROJECT_NAME}_adminer
        image: ${ADMINER_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${ADMINER_IP}
        restart: always
        ports:
            - ${ADMINER_EXPOSED_PORT}:8080
        env_file:
            - .env

    phpredisadmin:
        container_name: ${COMPOSE_PROJECT_NAME}_phpredisadmin
        image: ${PHPREDISADMIN_IMG_VERSION}
        networks:
            public_net:
                ipv4_address: ${PHPREDISADMIN_IP}
        ports:
            - ${PHPREDISADMIN_EXPOSED_PORT}:80
        env_file:
            - .env